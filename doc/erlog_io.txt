MODULE

        erlog_io

MODULE SUMMARY

        I/O functions for Erlog

DESCRIPTION

        Erlog is a Prolog interpreter implemented in Erlang and
        integrated with the Erlang runtime system.

EXPORTS

erlog_io:read([IoDevice,] Prompt) ->
        {ok,Term} | {ok,end_of_file} | {error,Error}.

erlog_io:write([IoDevice,] Term) -> ok.

        The same as calling write_term(Term, [numbervars]).

erlog_io:writeq([IoDevice,] Term) -> ok.

        The same as calling write_term(Term, [numbervars,quoted]).

erlog_io:write_canonical([IoDevice,] Term) -> ok.

        The same as calling write_term(Term, [ignore_ops,quoted]).

erlog_io:write_term([IoDevice,] Term, Options) -> ok.

        The options are numbervars, quoted and ignore_ops. These have
        the same meaning as in the standard. By default all are false.

erlog_io:read_string(String) -> {ok,Term} | {error,ErrorDescriptor}.

erlog_parse:term([Token]) -> {ok,Term} | {error,ErrorDescriptor}.
erlog_parse:term([Token], LineNo) -> {ok,Term} | {error,ErrorDescriptor}.

        Parse a list of Erlang tokens as a Prolog term. The line
        number (default 1) is used when returning errors.
        ErrorDescriptor has the format:

        {LineNo,ModuleName,Error}

erlog_scan:string(String) -> {ok,[Token],Line} | {error,Error,LineNo}.
erlog_scan:string(String, Line) -> {ok,[Token],Line} | {error,Error,Line}.

        Scan String and return a list of tokens.

erlog_scan:token(Continuation, Chars, Line) ->
        {more,Continuation} | {done,ReturnVal,RestChars}.

        Re-entrant scanner to scan one token. Compatible with io system.

erlog_scan:tokens(Continuation, Chars, Line) ->
        {more,Continuation} | {done,ReturnVal,RestChars}.

        Re-entrant scanner to scan tokens upto an end token.
        Compatible with io system.

AUTHOR

        Robert Virding - rvirding@gmail.com
        (with thanks to Richard O'Keefe for explaining some finer
        points of the Prolog standard)
